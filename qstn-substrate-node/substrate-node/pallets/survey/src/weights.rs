
//! Autogenerated weights for `pallet_survey`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-12, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benjamin-T490`, CPU: `Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_survey
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// pallets/survey/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use crate as pallet_survey;
/// Weight functions for `pallet_survey`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_survey::WeightInfo for WeightInfo<T> {
	/// Storage: `Survey::SurveysMap` (r:1 w:1)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	fn create_survey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3645`
		// Minimum execution time: 20_117_000 picoseconds.
		Weight::from_parts(21_061_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Survey::SurveysMap` (r:1 w:1)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	fn fund_survey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3645`
		// Minimum execution time: 58_633_000 picoseconds.
		Weight::from_parts(62_120_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Survey::SurveysMap` (r:1 w:1)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	fn create_and_fund_survey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3645`
		// Minimum execution time: 67_806_000 picoseconds.
		Weight::from_parts(68_925_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Survey::SurveysMap` (r:1 w:1)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	/// Storage: `Survey::Participants` (r:1 w:1)
	/// Proof: `Survey::Participants` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	fn register_participant() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `3645`
		// Minimum execution time: 27_250_000 picoseconds.
		Weight::from_parts(27_767_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Survey::SurveysMap` (r:1 w:0)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	/// Storage: `Survey::Participants` (r:1 w:0)
	/// Proof: `Survey::Participants` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `Survey::ParticipantsRewarded` (r:1 w:1)
	/// Proof: `Survey::ParticipantsRewarded` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn reward_participant() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `3645`
		// Minimum execution time: 38_649_000 picoseconds.
		Weight::from_parts(39_119_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Survey::SurveysMap` (r:1 w:1)
	/// Proof: `Survey::SurveysMap` (`max_values`: None, `max_size`: Some(180), added: 2655, mode: `MaxEncodedLen`)
	fn set_survey_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `181`
		//  Estimated: `3645`
		// Minimum execution time: 19_260_000 picoseconds.
		Weight::from_parts(19_987_000, 0)
			.saturating_add(Weight::from_parts(0, 3645))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
